from collections import defaultdict


def parse_rules(file_path):
    """
    Parse CNF rules from text file - grammar.txt
    """
    start_states = {}
    rules = defaultdict(dict)
    with open(file_path, 'r') as file:
        for line in file:
            line = line.strip()
            if line.startswith('#'):
                # New CNF rules for question found
                question = line[1:].strip()
                start_state = None
            elif line:
                # Add rule to current question
                parts = line.split(' -> ')
                non_terminal = parts[0]
                productions = parts[1].split(' | ')
                if start_state is None:
                    start_state = non_terminal  # Extract start state
                    start_states[question] = start_state
                rules[question][non_terminal] = set(productions)
    return start_states, rules


def calculate_cyk(substr, rules, cyk, x):
    """
    Apply CYK algorithm for a substring and update CYK table.
    """
    res = set()
    for z in range(x-1):
        var1 = cyk[substr[:z+1]]
        var2 = cyk[substr[z+1:]]
        for var in [x+y for x in var1 for y in var2]:
            for key in rules:
                if var in rules[key]:
                    res.add(key)
    cyk[substr] = res
    return cyk


def initialize_cyk(rules, string):
    """
    Initialize CYK table with single-character substrings.
    """
    cyk = defaultdict(set)
    for x in range(1, len(string)+1):
        for y in range(len(string)+1-x):
            substr = string[y:y+x]
            if x == 1:
                # Check if single-character substring is in rules
                for key in rules:
                    if substr in rules[key]:
                        cyk[substr].add(key)
            else:
                # Apply CYK algorithm for substrings of length > 1
                cyk = calculate_cyk(substr, rules, cyk, x)
    
    # Print the key-value pairs of obtained cyk 
    for key, value in cyk.items():
        print(key , value)
    return cyk


def check_membership(start_state, rules, string, question):
    """
    Check if the given string belongs to the language generated by the rules.
    """
    cyk = initialize_cyk(rules, string)
    
    # Check if the start state for the given question is present in the CYK table
    if start_state in cyk[string]:
        print(f"The String '{string}' belongs to the given {question}")
    else:
        print(f"The String '{string}' does not belong to the given {question}")


def main(file_path, question, string):
    # Parse rules from the file
    start_states, rules = parse_rules(file_path)
    # Get the start state corresponding to the given question
    start_state = start_states.get(question)
    if start_state:
        # Check if the string belongs to the language generated by the rules
        check_membership(start_state, rules[question], string, question)
    else:
        print(f"No start state found for question '{question}'")


if __name__ == "__main__":
    # File path containing grammar rules
    file_path = 'grammar.txt'
    # Input CNF question number (e.g., CNF1, CNF2, CNF3, CNF4)
    question = input("Enter CNF Question Number (e.g., CNF1, CNF2, CNF3, CNF4): ").strip()
    # Input string to check membership
    string = input("Enter input string: ")
    # Execute main function
    main(file_path, question, string)
